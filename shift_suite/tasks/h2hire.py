# shift_suite/tasks/h2hire.py
"""
Convert shortage hours (by role) to required full-time-equivalent (FTE) hires.

Input  : shortage_role_summary.parquet  (generated by shortage_and_brief)
Output : hire_plan.parquet      (role / lack_h / hire_fte / est_monthly_pay / est_recruit_cost)

Typical use
-----------
from shift_suite.tasks.h2hire import build_hire_plan
build_hire_plan(out_dir)   # out_dir contains shortage_role_summary.parquet
build_hire_plan(out_dir, safety_factor=1.1)  # adjust shortage hours by 10%
"""

from __future__ import annotations

import logging
import math
from pathlib import Path

import pandas as pd

# ──────────────────────────────────────────────────────────────────────────────
# User-tunable constants
MONTHLY_HOURS_FTE = 160  # 月あたり 1 FTE が賄える労働時間
RECRUIT_COST_PER_HIRE = 200_000  # 1 人あたり採用コスト (求人広告・紹介料など)
AVG_HOURLY_WAGE = 1_300  # 想定・自社スタッフ平均時給（円）


# ──────────────────────────────────────────────────────────────────────────────
def _calc_hire_fte(lack_h: float, monthly_hours_fte: int = MONTHLY_HOURS_FTE) -> int:
    """不足時間(時間)から必要 FTE 人数を整数で返す（切り上げ）"""
    return int(math.ceil(lack_h / monthly_hours_fte))


log = logging.getLogger(__name__)


def build_hire_plan(
    out_dir: Path,
    shortage_excel: str | Path = "shortage_role_summary.parquet",
    out_excel: str | Path = "hire_plan.parquet",
    hourly_wage: int = AVG_HOURLY_WAGE,
    recruit_cost: int = RECRUIT_COST_PER_HIRE,
    monthly_hours_fte: int = MONTHLY_HOURS_FTE,
    safety_factor: float = 1.0,
) -> Path:
    """
    Parameters
    ----------
    out_dir        : 解析出力フォルダ（heat_ALL.xlsx 等がある場所）
    shortage_excel : shortage_role_summary.parquet のファイル名 or パス
    out_excel      : 出力ファイル名
    hourly_wage    : 自社スタッフの平均時給 (default ``AVG_HOURLY_WAGE``)
    recruit_cost   : 1 人採用に掛かる固定コスト (default ``RECRUIT_COST_PER_HIRE``)
    monthly_hours_fte : 1 FTE が月あたり勤務する時間 (default ``MONTHLY_HOURS_FTE``)
    safety_factor : 不足時間に乗算する倍率。1.0 で変化なし

    Returns
    -------
    Path to hire_plan.parquet
    """
    shortage_fp = Path(out_dir) / shortage_excel
    if not shortage_fp.exists():
        raise FileNotFoundError(f"{shortage_fp} が見つかりません")

    df = pd.read_parquet(shortage_fp)

    if "role" not in df.columns or "lack_h" not in df.columns:
        raise ValueError(
            "shortage_role_summary.parquet に 'role' と 'lack_h' 列が必要です"
        )

    df_out = df.copy()
    lack_adjusted = df_out["lack_h"] * safety_factor
    df_out["hire_fte"] = lack_adjusted.apply(_calc_hire_fte, args=(monthly_hours_fte,))
    df_out["est_monthly_pay"] = df_out["hire_fte"] * monthly_hours_fte * hourly_wage
    df_out["est_recruit_cost"] = df_out["hire_fte"] * recruit_cost

    out_fp = Path(out_dir) / out_excel
    df_out.to_parquet(out_fp, index=False)

    # text summary
    summary_fp = out_fp.with_suffix(".txt")
    try:
        summary_lines = [
            f"total_hire_fte: {int(df_out['hire_fte'].sum())}",
            f"est_monthly_pay_total: {int(df_out['est_monthly_pay'].sum())}",
            f"est_recruit_cost_total: {int(df_out['est_recruit_cost'].sum())}",
        ]
        summary_fp.write_text("\n".join(summary_lines) + "\n", encoding="utf-8")
    except Exception as e:  # noqa: BLE001
        log.debug(f"failed writing hire plan summary: {e}")
    return out_fp


if __name__ == "__main__":  # CLI テスト用
    import argparse

    p = argparse.ArgumentParser()
    p.add_argument("out_dir", type=Path, help="解析 out フォルダ")
    args = p.parse_args()
    fp = build_hire_plan(args.out_dir)
    log.info("✅ hire_plan saved: %s", fp.relative_to(Path.cwd()))
